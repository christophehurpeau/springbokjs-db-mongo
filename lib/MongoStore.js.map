{"version":3,"sources":["../src/MongoStore.js"],"names":[],"mappings":"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","file":"src/MongoStore.js","sourcesContent":["var AbstractStore = require('springbokjs-db/lib/AbstractStore').AbstractStore;\nvar Cursor = require('./Cursor').Cursor;\nvar mongodb = require('mongodb');\nvar ObjectID = require('mongodb').ObjectID;\n\nvar regexpObjectId = /^[a-f\\d]{24}$/i;\nexport class MongoStore extends AbstractStore {\n    initialize() {\n        this.manager.VO.keyPath = '_id';\n        return new Promise((resolve, reject) => {\n            if (!this.manager.VO.name || this.manager.VO.name.toLowerCase() === 'function') {\n                throw new Error('Unable to find model name ' + this.manager.VO.name +\n                                        ', ' + this.manager.name);\n            }\n            this.db.connection.collection(this.manager.VO.name, {w: 1}, (err, collection) => {\n                if (err) {\n                    return reject(err);\n                }\n                this.collection = collection;\n                resolve();\n            });\n        });\n    }\n\n    store() {\n        return this.collection;\n    }\n\n    toId(id) {\n        if (id instanceof ObjectID) {\n            return id;\n        }\n        if (typeof id === 'string' && id.length === 24 && regexpObjectId.test(id)) {\n            return new ObjectID(id);\n        }\n        return id;\n    }\n\n    createMongoId(vo) {\n        if (!vo.id) {\n            vo.data._id = new ObjectID();\n        }\n    }\n\n    insert(options) {\n        return new Promise((resolve, reject) => {\n            this.collection.insert(options.data, options, (err, item) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(item);\n            });\n        });\n    }\n\n    update(options) {\n        return new Promise((resolve, reject) => {\n            var data = !options.partialUpdate ? options.data : { $set: options.data };\n            this.collection.update(options.criteria, data, options, (err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result.n);\n            });\n        });\n    }\n\n    remove(options) {\n        return new Promise((resolve, reject) => {\n            this.collection.remove(options.criteria, options, (err, count) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result.n);\n            });\n        });\n    }\n\n    /** @see http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#findone */\n    findOne(query, options){\n        return new Promise((resolve, reject) => {\n            //selector, options, callback?\n            //options= limit,sort,fields,skip,hint,tailable,tailableRetryInterval,returnKey,maxScan,min,max,comment,raw\n            this.collection.findOne(query, options, (err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    /** @see http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#find */\n    cursor(query, options) {\n        return new Promise((resolve, reject) => {\n            //selector, options, callback?\n            //options= limit,sort,fields,skip,hint,tailable,returnKey,maxScan,min,max,comment,raw\n            this.collection.find(query, options, (err, cursor) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(new Cursor(cursor, this, query));\n            });\n        });\n    }\n}\n\nMongoStore.ObjectID = ObjectID;\n\nMongoStore.initialize = function(db) {\n    return new Promise((resolve, reject) => {\n        var options = Object.assign({\n            host: 'localhost',\n            port: '27017'\n        }, db.options);\n        var connectionString = 'mongodb://' + (options.user ? options.user + ':' + options.password + '@' : '' )\n                            + options.host + ':' + options.port + '/' + db.dbName;\n        mongodb.MongoClient.connect(connectionString, function(err, connection) {\n            if (err) {\n                console.error('connection error:', err);\n                return reject(err);\n            }\n            db.connection = connection;\n            resolve();\n        });\n    });\n};\n\nMongoStore.close = function(db) {\n    db.connection.close();\n};\n"]}